
#//#persistence-read-side
lagom.persistence.read-side {

  cassandra {

    # Comma-separated list of contact points in the Cassandra cluster
    contact-points = ["127.0.0.1"]

    # Port of contact points in the Cassandra cluster
    port = ${lagom.defaults.persistence.read-side.cassandra.port}

    # The implementation of akka.persistence.cassandra.SessionProvider
    # is used for creating the Cassandra Session. By default the
    # the ServiceLocatorSessionProvider is building the Cluster from configuration
    # and contact points are looked up with ServiceLocator using the configured
    # cluster-id as the service name.
    # Use akka.persistence.cassandra.ConfigSessionProvider to read the contact-points
    # from configuration instead of using the ServiceLocator.
    # It is possible to replace the implementation of the SessionProvider
    # to reuse another session or override the Cluster builder with other
    # settings.
    # The implementation class may optionally have a constructor with an ActorSystem
    # and Config parameter. The config parameter is the enclosing config section.
    session-provider = com.lightbend.lagom.internal.persistence.cassandra.ServiceLocatorSessionProvider

    # The identifier that will be passed as parameter to the
    # ServiceLocatorSessionProvider.lookupContactPoints method.
    cluster-id = "cas_native"
    cluster-id = ${?CASSANDRA_SERVICE_NAME}

    # Write consistency level
    write-consistency = "QUORUM"

    # Read consistency level
    read-consistency = "QUORUM"

    # The name of the Cassandra keyspace
    keyspace = ${lagom.defaults.persistence.read-side.cassandra.keyspace}

    # Parameter indicating whether the journal keyspace should be auto created
    keyspace-autocreate = true

    # replication strategy to use when creating keyspace.
    # SimpleStrategy or NetworkTopologyStrategy
    replication-strategy = "SimpleStrategy"

    # Replication factor to use when creating keyspace.
    # Is only used when replication-strategy is SimpleStrategy.
    replication-factor = 1

    # Replication factor list for data centers, e.g. ["dc1:3", "dc2:2"].
    # Is only used when replication-strategy is NetworkTopologyStrategy.
    data-center-replication-factors = []

    # To limit the Cassandra hosts that it connects to a specific datacenter.
    # (DCAwareRoundRobinPolicy withLocalDc)
    # The id for the local datacenter of the Cassandra hosts it should connect to.
    # By default, this property is not set resulting in Datastax's standard round robin policy being used.
    local-datacenter = ""

    # To connect to the Cassandra hosts with credentials.
    # Authentication is disabled if username is not configured.
    authentication.username = ""
    authentication.password = ""

    # SSL can be configured with the following properties.
    # SSL is disabled if the truststore is not configured.
    # For detailed instructions, please refer to the DataStax Cassandra chapter about
    # SSL Encryption: http://docs.datastax.com/en/cassandra/2.0/cassandra/security/secureSslEncryptionTOC.html
    # Path to the JKS Truststore file
    ssl.truststore.path = ""
    # Password to unlock the JKS Truststore
    ssl.truststore.password = ""
    # Path to the JKS Keystore file (optional config, only needed for client authentication)
    ssl.keystore.path = ""
    # Password to unlock JKS Truststore and access the private key (both must use the same password)
    ssl.keystore.password = ""

    # Maximum size of result set
    max-result-size = 50001

    # Number of retries before giving up connecting for the initial connection to the Cassandra cluster
    connect-retries = 3

    # Delay between connection retries, for the initial connection to the Cassandra cluster
    connect-retry-delay = 1s

    # Max delay of the ExponentialReconnectionPolicy that is used when reconnecting
    # to the Cassandra cluster
    reconnect-max-delay = 30s

    # Cassandra driver connection pool settings
    # Documented at https://datastax.github.io/java-driver/features/pooling/
    connection-pool {

      # Create new connection threshold local
      new-connection-threshold-local = 800

      # Create new connection threshold remote
      new-connection-threshold-remote = 200

      # Connections per host core local
      connections-per-host-core-local = 1

      # Connections per host max local
      connections-per-host-max-local = 4

      # Connections per host core remote
      connections-per-host-core-remote = 1

      # Connections per host max remote
      connections-per-host-max-remote = 4

      # Max requests per connection local
      max-requests-per-connection-local = 32768

      # Max requests per connection remote
      max-requests-per-connection-remote = 2000

      # Sets the timeout when trying to acquire a connection from a host's pool
      pool-timeout-millis = 0
    }

    # Set the protocol version explicitly, should only be used for compatibility testing.
    # Supported values: 3, 4
    protocol-version = ""
    
    # Options to configure low-level socket options for the connections to Cassandra hosts
    # See: https://datastax.github.io/java-driver/manual/socket_options
    socket {

      # how long the driver waits to establish a new connection to a Cassandra node before giving up
      connection-timeout-millis = 5000

      # the per-host read timeout in milliseconds. Should be higher than the timeout settings used on the Cassandra side
      read-timeout-millis = 12000

      # a hint to the size of the underlying buffers for outgoing network I/O. Set to zero to
      # use the default from the underlying Netty transport (Java NIO or native epoll)
      send-buffer-size = 0

      # a hint to the size of the underlying buffers for incoming network I/O. Set to zero to
      # use the default from the underlying Netty transport (Java NIO or native epoll)
      receive-buffer-size = 0
    }

  }

}

lagom.defaults.persistence.read-side.cassandra {
	# Port of contact points in the Cassandra cluster
	port = 9042
	keyspace = "lagom_read"
}
#//#persistence-read-side

